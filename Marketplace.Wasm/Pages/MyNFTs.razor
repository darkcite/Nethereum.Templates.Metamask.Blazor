@page "/my-nfts"
@implements IDisposable
@inject SelectedEthereumHostProviderService SelectedHostProviderService
@using Marketplace.Wasm.Models
@using System.Numerics;
@using Nethereum.Web3
@inject Services.NFTService NftService
@inject IJSRuntime JsRuntime

<AuthorizeView Roles="EthereumConnected">
    <Authorized Context="authContext">
        <div class="container py-4">
            <div class="row mb-3">
                <label class="col-sm-3 col-form-label-lg">Selected Account:</label>
                <div class="col-sm-6">
                    @SelectedAccount
                    <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the host (ie Metamask) on change</small>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <h2>My NFTs:</h2>
                    @if (myNfts == null)
                    {
                        <p>Loading...</p>
                    }
                    else
                    {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                    @foreach (var nft in myNfts)
                    {
                        <div class="col mb-4">
                            <div class="card shadow h-100">
                                <div class="square-image">
                                    <img src="@ConvertIpfsToHttp(nft.Image)" class="card-img-top" alt="@nft.Name" />
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@nft.Name</h5>
                                    <p class="card-text">
                                        <strong>TokenId:</strong> @nft.TokenId
                                    </p>
                                    <p class="card-text">
                                        <strong>Price:</strong> @Web3.Convert.FromWei(nft.Price).ToString("F8") ETH
                                    </p>
                                    <p class="card-text">
                                        <strong>Listed for sale:</strong>
                                        @if (nft.ForSale)
                                        {
                                            <span><i class="fas fa-check-square text-success"></i></span>
                                        }
                                        else
                                        {
                                            <span><i class="far fa-square text-danger"></i></span>
                                        }
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-primary" @onclick="() => OpenModal(nft.TokenId)">Update NFT</button>
                                </div>
                            </div>
                            <!-- The Modal -->
                            <div class="modal fade" id="@($"modal{nft.TokenId.ToString()}")" tabindex="-1">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Update NFT</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="() => CloseModal(nft.TokenId)"></button>
                                        </div>
                                        <div class="modal-body">
                                            <EditForm Model="@UpdateNftModel" OnValidSubmit="() => UpdateNFT(nft.TokenId)">
                                                <DataAnnotationsValidator />
                                                <ValidationSummary />

                                                <div class="mb-3">
                                                    <label for="price" class="form-label">New price</label>
                                                    <InputNumber @bind-Value="@UpdateNftModel.Price" id="price" class="form-control" />
                                                </div>
                                                <div class="mb-3 form-check">
                                                    <InputCheckbox id="forSale" @bind-Value="@UpdateNftModel.ForSale" class="form-check-input" />
                                                    <label class="form-check-label" for="forSale">For sale</label>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Update</button>
                                            </EditForm>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div>
            Please connect to Ethereum !
        </div>
    </NotAuthorized>
</AuthorizeView>




@code {
    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    IEthereumHostProvider _ethereumHostProvider;
    List<NFT> myNfts;

    private UpdateNftModel UpdateNftModel { get; set; } = new UpdateNftModel();

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = SelectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            await LoadMyNfts();
        }
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await LoadMyNfts();
        this.StateHasChanged();
    }

    private async Task LoadMyNfts()
    {
        myNfts = await NftService.GetAllTokensOwnedByAccountAsync(SelectedAccount);
    }

    private string ConvertIpfsToHttp(string ipfsUrl)
    {
        return ipfsUrl.Replace("ipfs://", "https://we3ge.infura-ipfs.io/ipfs/");
    }

    private async Task UpdateNFT(BigInteger tokenId)
    {
        BigInteger priceInWei = Web3.Convert.ToWei(UpdateNftModel.Price);
        await NftService.UpdateNFTDetailsAsync(tokenId, priceInWei, UpdateNftModel.ForSale);
        await LoadMyNfts(); // to refresh the data
        CloseModal(tokenId);
    }


    private void OpenModal(BigInteger tokenId)
    {
        decimal priceInEther = Web3.Convert.FromWei(myNfts.FirstOrDefault(n => n.TokenId == tokenId).Price);

        UpdateNftModel = new UpdateNftModel
        {
            Price = priceInEther,
            ForSale = myNfts.FirstOrDefault(n => n.TokenId == tokenId).ForSale
        };

        JsRuntime.InvokeVoidAsync("window.openModal", $"modal{tokenId.ToString()}");
    }

    private void CloseModal(BigInteger tokenId)
    {
        JsRuntime.InvokeVoidAsync("window.closeModal", $"modal{tokenId.ToString()}");
    }
}
