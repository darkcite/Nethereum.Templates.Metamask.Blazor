@page "/my-nfts"
@implements IDisposable
@inject SelectedEthereumHostProviderService SelectedHostProviderService
@using Marketplace.Wasm.Models
@using System.Numerics;
@inject Services.NFTService NftService
@inject IJSRuntime JsRuntime

<AuthorizeView Roles="EthereumConnected">
    <Authorized Context="authContext">
        <div class="card m-1">
            <div class="card-body">
                <div class="row">
                    <label class="col-sm-3 col-form-label-lg">Selected Account:</label>
                    <div class="col-sm-6">
                        @SelectedAccount
                        <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the host (ie Metamask) on change</small>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <h2>My NFTs:</h2>
                        @if (myNfts == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            foreach (var nft in myNfts)
                            {
                    <div>
                        <h2>@nft.Name</h2>
                        <img src="@ConvertIpfsToHttp(nft.Image)" alt="@nft.Name" width="100" />
                        <button class="btn btn-primary" @onclick="() => OpenModal(nft.TokenId)">Update NFT</button>

                    </div>
                                <!-- The Modal -->
                                <div class="modal" tabindex="-1" id="@($"modal{nft.TokenId}")">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Update NFT</h5>
                                                <button type="button" class="btn-close" @onclick="() => CloseModal(nft.TokenId)"></button>
                                            </div>
                                            <div class="modal-body">
                                                <EditForm Model="@UpdateNftModel" OnValidSubmit="() => UpdateNFT(nft.TokenId)">

                                                    <DataAnnotationsValidator />
                                                    <ValidationSummary />
                                                    <BigIntegerInput @bind-Value="@UpdateNftModel.Price" id="price" placeholder="New price" />
                                                    <InputCheckbox id="forSale" @bind-Value="@UpdateNftModel.ForSale" />For sale
                                                    <InputText id="contactInfo" @bind-Value="@UpdateNftModel.ContactInfo" placeholder="New contact info" />
                                                    <button type="submit" class="btn btn-primary">Update</button>
                                                </EditForm>



                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div>
            Please connect to Ethereum !
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    IEthereumHostProvider _ethereumHostProvider;
    List<NFT> myNfts;

    private UpdateNftModel UpdateNftModel { get; set; } = new UpdateNftModel();

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = SelectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            await LoadMyNfts();
        }
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await LoadMyNfts();
        this.StateHasChanged();
    }

    private async Task LoadMyNfts()
    {
        myNfts = await NftService.LoadNFTsOwnedByAccount(SelectedAccount);
    }

    private string ConvertIpfsToHttp(string ipfsUrl)
    {
        return ipfsUrl.Replace("ipfs://", "https://we3ge.infura-ipfs.io/ipfs/");
    }

    private async Task UpdateNFT(BigInteger tokenId)
    {
        await NftService.UpdateNFTDetailsAsync(SelectedAccount, tokenId, UpdateNftModel.Price, UpdateNftModel.ForSale, UpdateNftModel.ContactInfo);
        await LoadMyNfts(); // to refresh the data
        CloseModal(tokenId);
    }


    private void OpenModal(BigInteger tokenId)
    {
        UpdateNftModel = new UpdateNftModel
        {
            Price = myNfts.FirstOrDefault(n => n.TokenId == tokenId).Price,
            ForSale = myNfts.FirstOrDefault(n => n.TokenId == tokenId).ForSale,
            ContactInfo = myNfts.FirstOrDefault(n => n.TokenId == tokenId).ContactInfo
        };

        JsRuntime.InvokeVoidAsync("window.openModal", $"modal{tokenId}");
    }

    private void CloseModal(BigInteger tokenId)
    {
        JsRuntime.InvokeVoidAsync("window.closeModal", $"modal{tokenId}");
    }




}
