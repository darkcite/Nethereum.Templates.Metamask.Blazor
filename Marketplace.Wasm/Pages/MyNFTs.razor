@page "/my-nfts"
@implements IDisposable
@inject SelectedEthereumHostProviderService SelectedHostProviderService
@using Marketplace.Wasm.Models
@using System.Numerics;
@using Nethereum.Web3
@inject Services.NFTService NftService
@inject IJSRuntime JsRuntime

<AuthorizeView Roles="EthereumConnected">
    <Authorized Context="authContext">
        <div class="container py-4">
            <h2 class="py-2">Items Listed</h2>
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                @if (NFTs != null && NFTs.Count > 0)
                {
                    @foreach (var nft in NFTs)
                    {
                        <div class="col">
                            <div class="card h-100 shadow rounded hover-shadow">
                                <div class="square-image">
                                    <img src="@ConvertIpfsToHttp(nft.Image)" class="card-img-top rounded" alt="@nft.Name" />
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@nft.Name</h5>
                                    <p class="card-text text-truncate">@nft.Description</p>
                                </div>
                                <div class="card-footer bg-dark d-flex justify-content-between align-items-center">
                                    <h5 class="text-white mb-0">@Web3.Convert.FromWei(nft.Price).ToString("F8") ETH</h5>
                                    <button class="btn btn-primary" @onclick="() => OpenModal(nft)">Details</button>
                                </div>
                            </div>
                        </div>
                        <!-- The Modal -->
                        <div class="modal" tabindex="-1" id="@($"modal{nft.TokenId.ToString()}")">
                            <div class="modal-dialog modal-dialog-centered modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">@nft.Name</h5>
                                        <button type="button" class="btn-close" @onclick="() => CloseModal(nft.TokenId)"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <img src="@ConvertIpfsToHttp(nft.Image)" class="img-fluid rounded" alt="@nft.Name" />
                                            </div>
                                            <div class="col-md-6">
                                                <p><strong>TokenId:</strong> @nft.TokenId</p>
                                                <p><strong>Price:</strong> @Web3.Convert.FromWei(nft.Price).ToString("F8") ETH</p>
                                                <p><strong>Seller:</strong> @nft.Seller</p>
                                                <p><strong>Owner:</strong> @nft.Owner</p>
                                                <p><strong>Description:</strong> @nft.Description</p>
                                                <p><strong>Token URI:</strong> @nft.TokenURI</p>
                                                <p><strong>For Sale:</strong> @(nft.ForSale ? "Yes" : "No")</p>
                                                <p><strong>Contact Info:</strong> @nft.ContactInfo</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col">
                        <h1 class="py-10 text-3xl">No NFTs listed</h1>
                    </div>
                }
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <div>
            Please connect to Ethereum !
        </div>
    </NotAuthorized>
</AuthorizeView>




@code {
    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    IEthereumHostProvider _ethereumHostProvider;
    List<NFT> myNfts;

    private UpdateNftModel UpdateNftModel { get; set; } = new UpdateNftModel();

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = SelectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            await LoadMyNfts();
        }
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await LoadMyNfts();
        this.StateHasChanged();
    }

    private async Task LoadMyNfts()
    {
        myNfts = await NftService.GetAllTokensOwnedByAccountAsync(SelectedAccount);
    }

    private string ConvertIpfsToHttp(string ipfsUrl)
    {
        return ipfsUrl.Replace("ipfs://", "https://we3ge.infura-ipfs.io/ipfs/");
    }

    private async Task UpdateNFT(BigInteger tokenId)
    {
        BigInteger priceInWei = Web3.Convert.ToWei(UpdateNftModel.Price);
        await NftService.UpdateNFTDetailsAsync(tokenId, priceInWei, UpdateNftModel.ForSale, UpdateNftModel.ContactInfo);
        await LoadMyNfts(); // to refresh the data
        CloseModal(tokenId);
    }


    private void OpenModal(BigInteger tokenId)
    {
        decimal priceInEther = Web3.Convert.FromWei(myNfts.FirstOrDefault(n => n.TokenId == tokenId).Price);

        UpdateNftModel = new UpdateNftModel
        {
            Price = priceInEther,
            ForSale = myNfts.FirstOrDefault(n => n.TokenId == tokenId).ForSale,
            ContactInfo = myNfts.FirstOrDefault(n => n.TokenId == tokenId).ContactInfo
        };

        JsRuntime.InvokeVoidAsync("window.openModal", $"modal{tokenId.ToString()}");
    }

    private void CloseModal(BigInteger tokenId)
    {
        JsRuntime.InvokeVoidAsync("window.closeModal", $"modal{tokenId.ToString()}");
    }
}
