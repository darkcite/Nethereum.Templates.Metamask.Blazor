@page "/"
@using Nethereum.Web3
@using Marketplace.Wasm.Models
@inject Services.NFTService NFTService

<div class="container">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
        @if (NFTs != null && NFTs.Count > 0)
        {
            @foreach (var nft in NFTs)
            {
                <div class="col mb-4">
                    <div class="card h-100 shadow rounded">
                        <div class="square-image">
                            <img src="@ConvertIpfsToHttp(nft.TokenMetadata.Image)" class="card-img-top rounded" alt="@nft.TokenMetadata.Name" />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-center">@nft.TokenMetadata.Name</h5>
                            <p class="card-text text-truncate">@nft.TokenMetadata.Description</p>
                        </div>
                        <div class="card-footer bg-dark d-flex justify-content-between align-items-center">
                            <h5 class="text-white mb-0">@Web3.Convert.FromWei(nft.Price).ToString("F8") ETH</h5>
                            <AuthorizeView Roles="EthereumConnected">
                                <Authorized Context="authContext">
                                    <button class="btn btn-primary" @onclick="() => BuyNFT(nft)">Buy</button>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col">
                <h1>No items in marketplace</h1>
            </div>
        }
    </div>
</div>

@code {
    private List<NFTViewModel> NFTs { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        NFTs = await NFTService.LoadNFTsForSale();
    }

    private async Task BuyNFT(NFTViewModel nft)
    {
        await NFTService.BuyTokenAsync(nft.TokenId, nft.Price);
        NFTs = await NFTService.LoadNFTsForSale();
    }

    private string ConvertIpfsToHttp(string ipfsUrl)
    {
        return ipfsUrl.Replace("ipfs://", "https://we3ge.infura-ipfs.io/ipfs/");
    }
}
